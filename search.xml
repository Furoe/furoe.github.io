<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自定义commit-msg校验规则</title>
      <link href="2023/08/04/%E8%87%AA%E5%AE%9A%E4%B9%89commit-msg%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/"/>
      <url>2023/08/04/%E8%87%AA%E5%AE%9A%E4%B9%89commit-msg%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>得益于某些制定规则的部门，最近提交代码的规范又发生了变更，导致提交错误需要解决，考虑到也不可能以后发生变更日常查文档，于是考虑使用<code>husky</code>在<code>git hooks</code>中进行拦截，整体思路还是拿到提交记录进行正则匹配。</p><h4 id="husky"><a href="#husky" class="headerlink" title="husky"></a>husky</h4><blockquote><p>首先需要安装<code>husky</code>  </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i husky -D</span><br><span class="line">npx pkg set scripts.prepare&#x3D;&quot;husky install&quot;</span><br><span class="line">npm run prepare &#x2F;&#x2F; npx husky install</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; or直接配置package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &#123;</span><br><span class="line">    &quot;prepare&quot;: &quot;husky install&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">npm run prepare</span><br></pre></td></tr></table></figure><h5 id="添加hooks脚本"><a href="#添加hooks脚本" class="headerlink" title="添加hooks脚本"></a>添加hooks脚本</h5><blockquote><p><code>git hooks</code>中有很多拦截钩子，需要考虑不同阶段使用什么钩子，我这里的应用场景只有本地提交<code>commit</code>时进行拦截校验。</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npx husky add .husky&#x2F;commit-msg</span><br></pre></td></tr></table></figure><p>这里会有一个问题，就是<code>husky</code>会将<code>.git</code>仓库中原生<code>hooks</code>进行覆盖。比如我之前<code>commit-msg hook</code>会在<code>commit</code>中添加<code>ChangeId</code>，使用<code>husky就失效了</code>，解决方法就是将原脚本的内容复制到<code>husky</code>目录下的脚本中。</p><h5 id="校验函数"><a href="#校验函数" class="headerlink" title="校验函数"></a>校验函数</h5><blockquote><p>进行校验采用的当然还是<code>js</code>，主要还是<code>shell</code>已经忘的差不多了  </p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cwd = Process.cwd()</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = fs.readFileSync(path.join(cwd, <span class="string">&#x27;.git/COMMIT_EDITMSG&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/\[[^\[\]]*\]/g</span></span><br><span class="line"><span class="keyword">const</span> reg2 = <span class="regexp">/\[(feat|fix|docs)\]:\[(.*)\]\[([^\[\]])+\]/g</span></span><br><span class="line"><span class="keyword">const</span> reg3 = <span class="regexp">/\[(docs|style|refactor|test|chore|tag|revert|perf)\]:\[[^\[\]]+\]/g</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示正确commit并退出</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTooltip</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;请检查commit格式&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[feat]:[单号][xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[feat]:[][xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[fix]:[单号][xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[fix]:[][xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[docs]:[单号][xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[docs]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[style]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[refactor]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[test]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[chore]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[tag]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[revert]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;[perf]:[xxxx]&#x27;</span>)</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line">  process.exitCode = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测含中括号信息数</span></span><br><span class="line"><span class="keyword">const</span> res1 = message.match(reg1)</span><br><span class="line"><span class="keyword">if</span> (!res1 || (res1.length !== <span class="number">2</span> &amp;&amp; res1.length !== <span class="number">3</span>)) &#123;</span><br><span class="line">  showTooltip()</span><br><span class="line">  <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res2 = reg2.test(message)</span><br><span class="line"><span class="keyword">const</span> res3 = reg3.test(message)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测匹配模式</span></span><br><span class="line"><span class="keyword">if</span> ((!res2 || res1.length !== <span class="number">3</span>) &amp;&amp; (!res3 || res1.length !== <span class="number">2</span>)) &#123;</span><br><span class="line">  showTooltip()</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;校验通过&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;--------------------------&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Mac问题"><a href="#Mac问题" class="headerlink" title="Mac问题"></a>Mac问题</h3><blockquote><p>Mac下需要修改<code>hook</code>文件的权限</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先修改hook脚本的权限</span></span><br><span class="line">chmod ug+x .husky/*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再git 提交修改的hook</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gerrit </tag>
            
            <tag> husky </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pnpm构建单一代码仓库</title>
      <link href="2022/08/01/pnpm%E6%9E%84%E5%BB%BA%E5%8D%95%E4%B8%80%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/"/>
      <url>2022/08/01/pnpm%E6%9E%84%E5%BB%BA%E5%8D%95%E4%B8%80%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="monorepo"><a href="#monorepo" class="headerlink" title="monorepo"></a>monorepo</h3><p>在项目的日常使用中，有时候由于多项目互相依赖，如果有功能频繁更新，这时候如果频繁更新版本对开发不太友好，所以在开发组件库等项目时，就需要引入<code>monorepo</code>的概念。<br>通过<code>workspace</code>将多个工程维护在一个代码仓库中，只需要及时更新代码就可以很好的进行多项目开发。</p><h4 id="为什么使用pnpm"><a href="#为什么使用pnpm" class="headerlink" title="为什么使用pnpm"></a>为什么使用pnpm</h4><p><code>pnpm</code>原生支持<code>monorepo</code>，所以在开发时可以直接使用pnpm，不需要配置任何配置文件。<br><code>pnpm</code>节约空间，安装速度快。</p><h4 id="pnpm配置"><a href="#pnpm配置" class="headerlink" title="pnpm配置"></a>pnpm配置</h4><p>首先工程中需要一个<code>pnpm</code>的配置文件，<code>touch .npmrc</code>。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">shamefully-hoist&#x3D;true</span><br></pre></td></tr></table></figure><p>在<code>package.json</code>中配置包管理工具以及<code>workspace</code>。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  packageManager: &quot;pnpm@7.5.0&quot;,</span><br><span class="line">  workspaces: [</span><br><span class="line">    &quot;packages/*&quot;,</span><br><span class="line">    &quot;play&quot;,</span><br><span class="line">    <span class="string">&quot;docs&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的建立<code>packages</code>、<code>play</code>、<code>docs</code>文件夹，在相应的目录中进行初始化，<code>pnpm init</code>。工作区的<code>package.json</code>需要配置<code>name</code>为<code>@o-ui/play</code>、<code>@o-ui/docs</code>。</p><h4 id="pnpm常用命令"><a href="#pnpm常用命令" class="headerlink" title="pnpm常用命令"></a>pnpm常用命令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pnpm install typescript -w # 将依赖安装到工程的根目录下</span><br><span class="line">pnpm install typescript -wD # 将依赖安装到工程的根目录devDependencies下</span><br><span class="line">pnpm add axios --filter @o-ui&#x2F;play # 为指定的工作区安装依赖，此时用到之前配置的工作区package名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> monorepo </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微前端qiankun项目改造</title>
      <link href="2022/05/26/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0/"/>
      <url>2022/05/26/%E5%BE%AE%E5%89%8D%E7%AB%AFqiankun%E9%A1%B9%E7%9B%AE%E6%94%B9%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h3><p>最近项目需要解耦，比如系统设置相关的功能抽成了一个权限系统，而多个项目需要使用它，当其中一个项目中需要对功能进行升级，其它需要同样更新的项目也需要更新代码，产生的开销比较大。<br>如果将这些项目解耦，各自开发，在需要的时候插入到基座上，就不用担心项目之间的依赖关系，也不用担心项目之间的代码冲突。而微前端很好的解决了这个问题，微应用都放在各自的沙箱中。</p><h4 id="基座项目改造"><a href="#基座项目改造" class="headerlink" title="基座项目改造"></a>基座项目改造</h4><p>安装qiankun</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i qiankun -S</span><br></pre></td></tr></table></figure><p>微应用配置</p><blockquote><p><code>zhName</code>和<code>entry_dev</code>为我的自定义字段，用于开发需求，其它字段是<code>qiankun</code>框架必须的。</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;APPCODE&quot;</span>: <span class="string">&quot;MicroBaseApp&quot;</span>, <span class="comment">// 动态菜单查询所需字段</span></span><br><span class="line">  <span class="attr">&quot;MICRO_APPS&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;zhName&quot;</span>: <span class="string">&quot;应用1&quot;</span>, <span class="comment">// 微应用的中文名称</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;app1&quot;</span>, <span class="comment">// 微应用的名称,唯一标识</span></span><br><span class="line">      <span class="attr">&quot;entry&quot;</span>: <span class="string">&quot;http://xxx.com&quot;</span>, <span class="comment">// 微应用的入口</span></span><br><span class="line">      <span class="attr">&quot;entry_dev&quot;</span>: <span class="string">&quot;localhost:8080&quot;</span>, <span class="comment">// 微应用的开发环境入口</span></span><br><span class="line">      <span class="attr">&quot;container&quot;</span>: <span class="string">&quot;#appContainer&quot;</span>, <span class="comment">// 微应用挂载容器</span></span><br><span class="line">      <span class="attr">&quot;activeRule&quot;</span>: <span class="string">&quot;/app1&quot;</span> <span class="comment">// 微应用的激活规则，涉及到路由分发</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;zhName&quot;</span>: <span class="string">&quot;应用2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;app2&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;entry&quot;</span>: <span class="string">&quot;http://xxx.com&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;entry_dev&quot;</span>: <span class="string">&quot;localhost:8081&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;container&quot;</span>: <span class="string">&quot;#appContainer&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activeRule&quot;</span>: <span class="string">&quot;/app2&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;zhName&quot;</span>: <span class="string">&quot;应用3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;app3&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;entry&quot;</span>: <span class="string">&quot;http://xxx.com&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;entry_dev&quot;</span>: <span class="string">&quot;localhost:8082&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;container&quot;</span>: <span class="string">&quot;#appContainer&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;activeRule&quot;</span>: <span class="string">&quot;/app3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板文件添加挂载容器</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;appContainer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注册微应用并启动</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; registerMicroApps, start &#125; <span class="keyword">from</span> <span class="string">&#x27;qiankun&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line">axios.get(<span class="string">`<span class="subst">$&#123;process.env.BASE_URL&#125;</span>config/<span class="subst">$&#123;process.env.VUE_APP_CONFIG&#125;</span>.json?t=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取配置</span></span><br><span class="line">  <span class="keyword">const</span> cnotConfig = getConfig(res.data)</span><br><span class="line">  Vue.prototype.$config = cnotConfig</span><br><span class="line">  <span class="comment">// 创建基座实例</span></span><br><span class="line">  <span class="keyword">const</span> baseVue = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">  <span class="comment">// 基座加载完成执行挂载微应用</span></span><br><span class="line">  baseVue.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 微应用配置</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">MICRO_APPS</span>: microApps &#125; = cnotConfig</span><br><span class="line">    <span class="comment">// 微应用入口</span></span><br><span class="line">    <span class="keyword">const</span> entryAttr = process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;entry_dev&#x27;</span> : <span class="string">&#x27;entry&#x27;</span></span><br><span class="line">    <span class="comment">// 注册微应用</span></span><br><span class="line">    registerMicroApps(microApps.map(<span class="function">(<span class="params">app</span>) =&gt;</span> (&#123;</span><br><span class="line">      ...app,</span><br><span class="line">      entry: app[entryAttr],</span><br><span class="line">      props: &#123;</span><br><span class="line">        cnotConfig</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)))</span><br><span class="line"></span><br><span class="line">    start(&#123; <span class="attr">opts</span>: <span class="string">&#x27;all&#x27;</span>, &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果跨域，还需要配置devServer。</p><h4 id="微应用项目改造"><a href="#微应用项目改造" class="headerlink" title="微应用项目改造"></a>微应用项目改造</h4><p>创建public-path.js，解决静态资源加载问题。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="built_in">window</span>.__INJECTED_PUBLIC_PATH_BY_QIANKUN__</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.js改造</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./public-path&#x27;</span></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">&#123;container, parentStore&#125; = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">  instance = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router,</span><br><span class="line">    store,</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        parentStore</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">  &#125;).$mount(container ? container.querySelector(<span class="string">&#x27;#app&#x27;</span>) : <span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 独立运行时</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.__POWERED_BY_QIANKUN__) &#123;</span><br><span class="line">  axios.get(<span class="string">`<span class="subst">$&#123;process.env.BASE_URL&#125;</span>config/<span class="subst">$&#123;process.env.VUE_APP_CONFIG&#125;</span>.json?t=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.prototype.$config = getConfig(res.data)</span><br><span class="line">    render()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为微应用，暴露三个生命周期函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;cnot vue app bootstraped&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">mount</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">  axios.get(<span class="string">`<span class="subst">$&#123;__webpack_public_path__&#125;</span>config/<span class="subst">$&#123;process.env.VUE_APP_CONFIG&#125;</span>.json?t=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()&#125;</span>`</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.prototype.$config = getConfig(res.data)</span><br><span class="line">    <span class="comment">// 动态菜单查询字段</span></span><br><span class="line">    <span class="comment">// Vue.prototype.BaseAppCode = props?.anopConfig?.APPCODE ?? &#x27;&#x27;</span></span><br><span class="line">    render(props)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unmount</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  instance.$destroy()</span><br><span class="line">  instance.$el.innerHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  instance = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json需要添加name字段，需和基座name保持一致，配合webpack使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./package&#x27;</span>)</span><br><span class="line"></span><br><span class="line">output: &#123;</span><br><span class="line">  library: <span class="string">`<span class="subst">$&#123;name&#125;</span>-[name]`</span>,</span><br><span class="line">  libraryTarget: <span class="string">&#x27;umd&#x27;</span>,</span><br><span class="line">  jsonpFunction: <span class="string">`webpackJsonp_<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，如果单页应用主容器使用了结构包装，需要通过判断是否显示导航以及面包屑等等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;fe-no-shrink&quot; v-if&#x3D;&quot;!isMicroApp&quot;&gt;</span><br><span class="line">  &lt;Navbar&gt;&lt;&#x2F;Navbar&gt;</span><br><span class="line">  &lt;Breadcrumb&gt;&lt;&#x2F;Breadcrumb&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Navbar from &#39;@&#x2F;components&#x2F;Navbar&#39;</span><br><span class="line">import Breadcrumb from &#39;@&#x2F;components&#x2F;Breadcrumb&#39;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Main&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Navbar,</span><br><span class="line">    Breadcrumb</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      isMicroApp: !!window.__POWERED_BY_QIANKUN__</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>warning: 微应用和微应用之间样式会隔离，但是基座和微应用之间样式会互相影响，如果发生不在预期内的变化，建议加前缀进行人为隔离。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qiankun </tag>
            
            <tag> micro-frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Look back 2021</title>
      <link href="2021/11/09/Look-back-2021/"/>
      <url>2021/11/09/Look-back-2021/</url>
      
        <content type="html"><![CDATA[<p>  如果这一年有关键词，我的应该是“舒适”吧。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021.10.24</title>
      <link href="2021/10/25/2021-10-24/"/>
      <url>2021/10/25/2021-10-24/</url>
      
        <content type="html"><![CDATA[<p>  下午部门团建回来，路过学校高架的时候睡着了，刚到家，室友说学校的实验室爆炸了。<br>  一开始没觉得很严重，直到做饭的时候同事给我@我，给我发了两死九伤的新闻。<br>  突然就emo了，也许是离得近，也许是因为母校。<br>  生命太过脆弱，这些实验楼还是这几年建起来的，学校一直都在重视实验室的建立，没想到这就出现安全事故了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>重庆-成都计划</title>
      <link href="2021/09/17/%E9%87%8D%E5%BA%86-%E6%88%90%E9%83%BD%E8%AE%A1%E5%88%92/"/>
      <url>2021/09/17/%E9%87%8D%E5%BA%86-%E6%88%90%E9%83%BD%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h2 id="重庆成都景点"><a href="#重庆成都景点" class="headerlink" title="重庆成都景点"></a>重庆成都景点</h2><h3 id="重庆"><a href="#重庆" class="headerlink" title="重庆"></a>重庆</h3><h4 id="李子坝轻轨站"><a href="#李子坝轻轨站" class="headerlink" title="李子坝轻轨站"></a>李子坝轻轨站</h4><p>重庆地标</p><h4 id="洪崖洞"><a href="#洪崖洞" class="headerlink" title="洪崖洞"></a>洪崖洞</h4><p>晚上去看比较好看</p><h4 id="八一路好吃街-解放碑"><a href="#八一路好吃街-解放碑" class="headerlink" title="八一路好吃街/解放碑"></a>八一路好吃街/解放碑</h4><h4 id="磁器口"><a href="#磁器口" class="headerlink" title="磁器口"></a>磁器口</h4><h4 id="南滨路"><a href="#南滨路" class="headerlink" title="南滨路"></a>南滨路</h4><p>适合步行或骑行，慢节奏</p><h4 id="川美"><a href="#川美" class="headerlink" title="川美"></a>川美</h4><p>涂鸦一条街等等</p><h3 id="成都"><a href="#成都" class="headerlink" title="成都"></a>成都</h3><h4 id="宽窄巷子"><a href="#宽窄巷子" class="headerlink" title="宽窄巷子"></a>宽窄巷子</h4><p>三条巷子平行排列，分别是宽巷子、窄巷子、井巷子，其中井巷子有一面《砖》文化观景墙。</p><h4 id="小通巷"><a href="#小通巷" class="headerlink" title="小通巷"></a>小通巷</h4><p>慢生活街道，逛完宽窄巷子可以来这吃饭。</p><h4 id="魁星楼"><a href="#魁星楼" class="headerlink" title="魁星楼"></a>魁星楼</h4><p>成都小吃一条街</p><h4 id="武侯祠-锦里"><a href="#武侯祠-锦里" class="headerlink" title="武侯祠/锦里"></a>武侯祠/锦里</h4><p>武侯祠是君臣合祀祠庙，是三国遗迹博物馆。锦里是武侯祠的一部分。<br>适合下午逛武侯祠，晚上去锦里。</p><h4 id="耍都"><a href="#耍都" class="headerlink" title="耍都"></a>耍都</h4><p>逛完锦里可以去耍都吃夜宵。</p><h4 id="春熙路"><a href="#春熙路" class="headerlink" title="春熙路"></a>春熙路</h4><p>成都市锦江区</p><h4 id="太古里"><a href="#太古里" class="headerlink" title="太古里"></a>太古里</h4><p>锦江区中纱帽街8号</p><h4 id="杜甫草堂"><a href="#杜甫草堂" class="headerlink" title="杜甫草堂"></a>杜甫草堂</h4><h4 id="青羊宫"><a href="#青羊宫" class="headerlink" title="青羊宫"></a>青羊宫</h4><p>可以川博+杜甫草堂+青羊宫</p><h4 id="人民公园"><a href="#人民公园" class="headerlink" title="人民公园"></a>人民公园</h4><h4 id="熊猫基地"><a href="#熊猫基地" class="headerlink" title="熊猫基地"></a>熊猫基地</h4><p>成华区成都外北熊猫大道1375号</p><h4 id="黄龙溪古镇"><a href="#黄龙溪古镇" class="headerlink" title="黄龙溪古镇"></a>黄龙溪古镇</h4><p>景点级别：AAAA级<br>地址：成都市双流区黄龙溪镇镇龙街</p><h4 id="都江堰"><a href="#都江堰" class="headerlink" title="都江堰"></a>都江堰</h4><p>景点级别：AAAAA级<br>地址：成都市都江堰市公园路</p><h4 id="三星堆博物馆"><a href="#三星堆博物馆" class="headerlink" title="三星堆博物馆"></a>三星堆博物馆</h4><p>广汉站到三星堆博物馆打车</p><h3 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h3><p>重庆选择解放碑附近，成都住在春熙路附近</p><h3 id="出行安排"><a href="#出行安排" class="headerlink" title="出行安排"></a>出行安排</h3><h4 id="Day1"><a href="#Day1" class="headerlink" title="Day1"></a>Day1</h4><p>南京-&gt;重庆<br>中午到，先吃碗重庆小面。<br>酒店-&gt;解放碑-&gt;八一广场-&gt;山城步道-&gt;洪崖洞<br>吃吃喝喝</p><h4 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h4><p>穿楼轻轨-&gt;李子坝轻轨站-&gt;川美-&gt;磁器口-&gt;南滨路<br>钢琴阶梯就在2号线临江口站的D口<br>川美一定要去黄桷坪校区</p><h4 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h4><p>预留一天，考虑聚餐或者其它意外情况</p><h4 id="Day4"><a href="#Day4" class="headerlink" title="Day4"></a>Day4</h4><p>重庆-&gt;成都<br>春熙路-&gt;太古里-&gt;有时间再安排或者随便逛逛路边看小姐姐<br>方所<br>地址：中纱帽街8号远洋太古里MB1楼<br>言几又<br>地址：高新区天仁路388号凯德天府F4/锦江区春熙路IFS国际金融中心负二楼</p><h4 id="Day5"><a href="#Day5" class="headerlink" title="Day5"></a>Day5</h4><p>熊猫基地-&gt;川博-&gt;杜甫草堂-&gt;青羊宫<br>川博对面：陈麻婆豆腐<br>杜甫草堂附近川西坝子火锅</p><h4 id="Day6"><a href="#Day6" class="headerlink" title="Day6"></a>Day6</h4><p>都江堰或者黄龙溪古镇</p><h5 id="都江堰-1"><a href="#都江堰-1" class="headerlink" title="都江堰"></a>都江堰</h5><p>在成都地铁二号线犀浦站乘坐到 都江堰的高铁，车程约20分钟，票价10元/人，出站后按指引坐4路车（2元/人）终点站下车即可（车程大约30分钟）</p><h4 id="Day7"><a href="#Day7" class="headerlink" title="Day7"></a>Day7</h4><p>乐山大佛-&gt;峨眉山<br>有空就先去乐山大佛，没空就只去峨眉山</p><h4 id="Day8"><a href="#Day8" class="headerlink" title="Day8"></a>Day8</h4><p>随便逛逛<br>成都高铁去重庆<br>重庆飞的回南京</p>]]></content>
      
      
      <categories>
          
          <category> 旅游 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成都 </tag>
            
            <tag> 重庆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性与代码优化</title>
      <link href="2021/09/06/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%8E%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
      <url>2021/09/06/ES6%E6%96%B0%E7%89%B9%E6%80%A7%E4%B8%8E%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>这个应该不算新特性，但是可以结合新特性一起优化，还是很有必要的。<br>因为js是动态语言，弱类型语言，所以js中的变量往往需要判断各种空值，这时使用类型转换就可以省略冗长的代码。<br>比如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="params">x !== <span class="string">&#x27;&#x27;</span> &amp;&amp; x !== <span class="literal">null</span> &amp;&amp; x !== <span class="literal">undefined</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">!!x</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选链操作符以及空值合并操作符"><a href="#可选链操作符以及空值合并操作符" class="headerlink" title="可选链操作符以及空值合并操作符"></a>可选链操作符以及空值合并操作符</h3><p>ES2020新增了新的操作符<code>?.</code>和<code>??</code>，当左值为<code>null</code>或者<code>undefined</code>，返回非左值。<br>对于多层级的取值，如果一层一层的判断，普通的用法可能使用嵌套的判断语句，再简单点的也只是使用逻辑操作符的短路效应，但这还是不够简洁。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般健壮性代码</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">book</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">book.price</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">book.price.total</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// pass</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑操作符</span></span><br><span class="line">book &amp;&amp; book.price &amp;&amp; book.price.total</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选链调用</span></span><br><span class="line">book?.price?.total??<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h3><p>ES6之后，对于字面量对象属性赋值，左值的变量名与非左值的变量名相等时，可以采用简化写法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  x: x,</span><br><span class="line">  y: y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  x,</span><br><span class="line">  y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简写方法"><a href="#简写方法" class="headerlink" title="简写方法"></a>简写方法</h3><p>ES6之后，定义对象的属性方法时，可以省略<code>function</code>关键字以及冒号。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> square = &#123;</span><br><span class="line">  <span class="function"><span class="title">area</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.side * <span class="built_in">this</span>.side</span><br><span class="line">  &#125;,</span><br><span class="line">  side: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>ES6可以将表达式放在中括号中作为计算属性来使用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PROPERTY_NAME = <span class="string">&#x27;p1&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computedPropertyName</span>(<span class="params"></span>) = </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;p&#x27;</span> + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  [PROPERTY_NAME]: <span class="number">1</span>,</span><br><span class="line">  [computedPropertyName()]: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展操作符"><a href="#拓展操作符" class="headerlink" title="拓展操作符"></a>拓展操作符</h3><p>ES2018及之后，使用<code>...</code>（拓展操作符）可以简化对象融合以及数组合并的操作。但是不适合在循环或者递归函数中使用，开销很大。<br>拓展操作符只能拓展对象的自有属性，不拓展任何继承属性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;...obj1, ...obj2&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [...arr1, ...arr2]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="built_in">Object</span>.create(&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="keyword">let</span> p = &#123;...o&#125;</span><br><span class="line">p.x <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>使用Array构造函数无法创建包含一个元素的数组，<code>Array.of()</code>可以。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">10</span>) <span class="comment">// [10]</span></span><br></pre></td></tr></table></figure><h3 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form()"></a>Array.form()</h3><p>将可迭代对象或类数组作为参数，生成一个新数组。</p><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>通过使用不同的数组遍历方式，可以灵活采用不同的方法。</p><h4 id="需要可中断"><a href="#需要可中断" class="headerlink" title="需要可中断"></a>需要可中断</h4><p>在需要可中断循环时，一般使用<code>for</code>循环</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i = <span class="number">0</span>;i &lt; arr.length;i++</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> x <span class="keyword">in</span> arr</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> x <span class="keyword">of</span> arr</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全遍历"><a href="#全遍历" class="headerlink" title="全遍历"></a>全遍历</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无返回值，且不可被break、continue中断</span></span><br><span class="line">arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item)</span><br></pre></td></tr></table></figure><h4 id="返回修改后的等长数组"><a href="#返回修改后的等长数组" class="headerlink" title="返回修改后的等长数组"></a>返回修改后的等长数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr1 = arr.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="返回满足条件的子数组"><a href="#返回满足条件的子数组" class="headerlink" title="返回满足条件的子数组"></a>返回满足条件的子数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">subArr = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="返回满足条件的第一个元素"><a href="#返回满足条件的第一个元素" class="headerlink" title="返回满足条件的第一个元素"></a>返回满足条件的第一个元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.find(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">3</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="返回满足条件的第一个元素索引"><a href="#返回满足条件的第一个元素索引" class="headerlink" title="返回满足条件的第一个元素索引"></a>返回满足条件的第一个元素索引</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">3</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="判断数组内元素是否全部满足条件"><a href="#判断数组内元素是否全部满足条件" class="headerlink" title="判断数组内元素是否全部满足条件"></a>判断数组内元素是否全部满足条件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>) <span class="comment">// false</span></span><br><span class="line">a.every(<span class="function"><span class="params">item</span> =&gt;</span> item &lt; <span class="number">10</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="判断数组内是否存在满足条件元素"><a href="#判断数组内是否存在满足条件元素" class="headerlink" title="判断数组内是否存在满足条件元素"></a>判断数组内是否存在满足条件元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.some(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span> === <span class="number">0</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">a.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>)</span><br><span class="line">a.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y, <span class="number">1</span>)</span><br><span class="line">a.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> (x &gt; y) ? x : y)</span><br><span class="line"></span><br><span class="line">a.reduceRight(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>) <span class="comment">// 从高索引开始归并 </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 简洁代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.x工程搭建</title>
      <link href="2021/05/11/Vue3-x%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/"/>
      <url>2021/05/11/Vue3-x%E5%B7%A5%E7%A8%8B%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="脚手架安装"><a href="#脚手架安装" class="headerlink" title="脚手架安装"></a>脚手架安装</h3><p>vite脚手架</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm init @vitejs&#x2F;app blog-vue3 --template vue-ts</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line">yarn create @vitejs&#x2F;app blog-vue3 --template vue-ts</span><br></pre></td></tr></table></figure><p>vue-cli脚手架</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue create blog-vue3</span><br></pre></td></tr></table></figure><blockquote><p>这里我采用vite脚手架安装，毕竟vite号称更快  </p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog-vue3</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装完成后会自动生成<code>shims-vue.d.ts</code>，这个文件是对<code>.vue</code>文件进行类型校验的声明。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; DefineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vue-router@4</span><br></pre></td></tr></table></figure><p>创建<code>router</code>目录，再创建一个<code>index.ts</code>作为路由的主文件，<code>routes.ts</code>作为路由的存放路径。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./routes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history: createWebHistory(),</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// routes.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; RouteRecordRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: <span class="built_in">Array</span>&lt;RouteRecordRaw&gt; = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">    <span class="comment">// .vue后缀不可省略</span></span><br><span class="line">    component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/view/Home.vue)</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">]</span></span><br></pre></td></tr></table></figure><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i vuex@4</span><br></pre></td></tr></table></figure><p>创建<code>store</code>目录下<code>index.ts</code>作为<code>vuex</code>主文件</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = createStore(&#123;</span><br><span class="line">  <span class="function"><span class="title">state</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>给vuex添加类型检验也需要写一个声明文件。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// shims-vuex.d.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ComponentCustomProperties &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Store &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> State &#123;</span><br><span class="line">    count: <span class="built_in">Number</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">interface</span> ComponentCustomProperties &#123;</span><br><span class="line">    $store: Store&lt;State&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>在<code>import</code>时直接输入<code>../../../</code>是很麻烦的事情，这时候就需要使用别名。<br>直接配置<code>tsconfig.ts</code>中的<code>baseUrl</code>和<code>paths</code>没有生效，我也不想使用<code>tsconfig-path</code>。<br>所以换种思路，<code>vite.config.ts</code>中有<code>resolve.alias</code>属性用来设置别名，类似<code>webpack</code>配置。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig (&#123;</span><br><span class="line">  plugin: [vue()],</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="引入vue-router和vuex"><a href="#引入vue-router和vuex" class="headerlink" title="引入vue-router和vuex"></a>引入vue-router和vuex</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).use(store).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
            <tag> Typescript </tag>
            
            <tag> Vue3 </tag>
            
            <tag> Vite </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于24</title>
      <link href="2021/03/26/%E5%85%B3%E4%BA%8E24/"/>
      <url>2021/03/26/%E5%85%B3%E4%BA%8E24/</url>
      
        <content type="html"><![CDATA[<h3 id="24岁"><a href="#24岁" class="headerlink" title="24岁"></a>24岁</h3><p>在我一直以来的感觉中，12年就像树的年轮一般，转着转着人就老了。<br>本来是对自己的生日无感的，但是之前看到小爸给小妈过生日，不由得感慨生活还是需要一些仪式感。<br>于是打算去海底捞试试社死举灯牌，然后到了昨天才想起来，我今天约了教练。<br>生活好像有点忙。<br>回忆了一下过去几年生日是怎么过的，前年送了自己一张JJ门票，去年因为疫情好像是在打游戏，但是奶奶给我打电话了。<br>今年7：30老妈就给我发消息。<br>现的生活说枯燥也枯燥，但却不觉得无聊。<br>少年的眼里又有光了。<br>每天早上醒了，准备漱口的时候，娜娜一定趴在猫爬架上盯着猫粮机，娜娜只有这个时候不那么怕我，让我随意撸。<br>煮上两个鸡蛋，喝杯热水，再喝杯牛奶，拿上餐盒，磨磨蹭蹭出小区，坐公交。<br>中午打开餐盒，接受同事的赞羡。<br>晚上回家，有空健身房，没空小区走一走，直播续下粉丝牌。<br>每周都要做顿大餐，这就是生活的乐趣吧。<br>基友之前请假回家，直接转车来南京见一面。南京，也是和基友呆了四年的城市。<br>和基友聊天，在部队混的挺不错了，其实我挺羡慕基友的能说会道，会做人这一点，大家都有不错的未来。<br>走的时候，来了个基情四射的拥抱，像我这种挺抗拒身体接触的人也抵不过少年纯真。<br>以前觉得十年朋友挺罕见的，但我好像还不少，也是很幸运。<br>被亲戚、朋友、同事问的最多的问题就是有没有对象，买房的问题。以前我会觉得难以启齿，现在大概有了自己的想法和规划，<br>开始理直气壮。<br>每次和小爸聊天，小爸都问明年能不能带对象回家，我每次都说我争取哈哈哈哈。<br>人只有经历了一些事情才会长大，2020因为疫情，过年没回家，和爷爷打电话，爷爷说身体不好，说后面能回家就回家吧。<br>突然才发现爷爷老了，过去的两年像消失了一样。<br>后来我在2021计划上加上了一条多回家看看。<br>最近和爷爷聊天，提到最近在减肥，还瘦了挺多的。爷爷就说不用减肥，现在这样挺好的，爷爷以为的我说的减肥是节食，担心不得了。<br>和父母的关系也有所缓和。<br>有一次健完身后，走在小区里，想了想我到底想要什么样的生活。<br>我认真想了想，我想要的大概是一个很简单的生活，不需要和别人比较，生活压力不会那么大，能做一些想做的事情。<br>虽然我给自己的定位是挺菜的一个人，但是依然会努力追逐想要的生活。<br>怀揣18岁的纯真，奔赴30岁的未来。<br>最近的大愿望，养只边牧，万家灯火添我一盏。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布基于typescript的npm包</title>
      <link href="2021/01/19/%E5%8F%91%E5%B8%83npm%E5%8C%85/"/>
      <url>2021/01/19/%E5%8F%91%E5%B8%83npm%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="如何发布一个npm包"><a href="#如何发布一个npm包" class="headerlink" title="如何发布一个npm包"></a>如何发布一个npm包</h3><p>一个npm只需要包含带有<code>name</code>和<code>version</code>的<code>package.json</code>文件就可以了，实际上还需要做一些准备工作。</p><h4 id="注册npm账号"><a href="#注册npm账号" class="headerlink" title="注册npm账号"></a>注册npm账号</h4><p><a href="https://www.npmjs.com/signup">在这注册</a><br>然后在命令行使用<code>npm adduser</code>或者<code>npm login</code>输入你的<code>username</code>、<code>password</code>、<code>email</code>。</p><h4 id="开始开发一个包"><a href="#开始开发一个包" class="headerlink" title="开始开发一个包"></a>开始开发一个包</h4><p>创建一个文件夹，添加预设的<code>package.json</code>。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;@furo_yang/tiny&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布一个空包"><a href="#发布一个空包" class="headerlink" title="发布一个空包"></a>发布一个空包</h4><p>如果直接<code>npm publish</code>发布的包是私有的，这里先设为公开。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm publish --access&#x3D;public</span><br></pre></td></tr></table></figure><h4 id="更新代码以及版本"><a href="#更新代码以及版本" class="headerlink" title="更新代码以及版本"></a>更新代码以及版本</h4><p><code>npm</code>使用的版本控制是<code>semver</code>。这里给这个包添加一个<code>index.js</code>作为入口，再更新版本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm major</span><br></pre></td></tr></table></figure><h3 id="创建基于typescript的npm包模板"><a href="#创建基于typescript的npm包模板" class="headerlink" title="创建基于typescript的npm包模板"></a>创建基于typescript的npm包模板</h3><p>在上一步已经知道了如何发布一个基本的包了，但是我们发布包的时候不可能每次都重复这样的操作。基于以上，是时候创建一个<code>npm</code>包模板工程了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建文件夹</span><br><span class="line">mkdir tiny</span><br><span class="line">cd tiny</span><br><span class="line"># 初始化git仓库</span><br><span class="line">git init </span><br><span class="line">touch .gitignore</span><br><span class="line">echo &quot;# npm packge template based on typescript&quot; &gt;&gt; README.md</span><br><span class="line"># 安装typescript</span><br><span class="line">npm install typescript --save</span><br><span class="line">npm init --y</span><br><span class="line"># 创建tsconfig.json</span><br><span class="line">.&#x2F;node_modules&#x2F;.bin&#x2F;tsc --init</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">#### 修改tsconfig.json</span><br><span class="line">&#96;&#96;&#96;JSON</span><br><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;es5&quot;,</span><br><span class="line">        &quot;module&quot;: &quot;commonjs&quot;,</span><br><span class="line">        &quot;declaration&quot;: true,</span><br><span class="line">        &quot;strict&quot;: true,</span><br><span class="line">        &quot;outDir&quot;: &quot;.&#x2F;lib&quot;,</span><br><span class="line">        &quot;esModuleInterop&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;include&quot;: [&quot;src&quot;],</span><br><span class="line">    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;**&#x2F;__tests__&#x2F;*&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加npm脚本"><a href="#添加npm脚本" class="headerlink" title="添加npm脚本"></a>添加npm脚本</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;tsc -w&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;tsc&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir src</span><br><span class="line">cd src</span><br><span class="line">touch index.ts</span><br><span class="line"></span><br><span class="line"># index.ts</span><br><span class="line">export const Greeter &#x3D; (name: string) &#x3D;&gt; &#96;Hello $&#123;name&#125;&#96;;</span><br></pre></td></tr></table></figure><h4 id="添加忽略提交的文件以及文件夹"><a href="#添加忽略提交的文件以及文件夹" class="headerlink" title="添加忽略提交的文件以及文件夹"></a>添加忽略提交的文件以及文件夹</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_modules</span><br><span class="line">&#x2F;lib</span><br></pre></td></tr></table></figure><h4 id="添加单元测试"><a href="#添加单元测试" class="headerlink" title="添加单元测试"></a>添加单元测试</h4><p><code>npm install jest ts-jest @types/jest --save</code><br>配置<code>jestconfig.json</code>文件</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;transform&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;^.+\\.(t|j)sx?$&quot;</span>: <span class="string">&quot;ts-jest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;testRegex&quot;</span>: <span class="string">&quot;(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;moduleFileExtensions&quot;</span>: [<span class="string">&quot;ts&quot;</span>, <span class="string">&quot;tsx&quot;</span>, <span class="string">&quot;js&quot;</span>, <span class="string">&quot;jsx&quot;</span>, <span class="string">&quot;json&quot;</span>, <span class="string">&quot;node&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再配置<code>package.json</code>里的<code>test</code>命令<code>&quot;test&quot;: &quot;jest --config jestconfig.json&quot;</code>。</p><h4 id="发布npm-package"><a href="#发布npm-package" class="headerlink" title="发布npm package"></a>发布npm package</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm version major</span><br><span class="line">npm publish --access&#x3D;public</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> npm </tag>
            
            <tag> jest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react+ts+antd建站</title>
      <link href="2021/01/13/react-ts-antd%E5%BB%BA%E7%AB%99/"/>
      <url>2021/01/13/react-ts-antd%E5%BB%BA%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="使用脚手架创建工程"><a href="#使用脚手架创建工程" class="headerlink" title="使用脚手架创建工程"></a>使用脚手架创建工程</h3><p><code>npx create-react-app my-app --template typescript</code><br>或者<br><code>yarn create-react-app my-app --typescript</code></p><h3 id="安装antd"><a href="#安装antd" class="headerlink" title="安装antd"></a>安装antd</h3><p><code>npm install antd --save</code></p><h3 id="安装node-sass和sass-loader"><a href="#安装node-sass和sass-loader" class="headerlink" title="安装node-sass和sass-loader"></a>安装node-sass和sass-loader</h3><p>这里有个坑，要先安装<code>node-sass</code>，再安装<code>sass-loader</code>。如果先安装<code>sass-loader</code>，默认安装的<code>sass-loader</code>依赖的是<code>^4.0.0</code>的<code>node-sass</code>，而默认安装的<code>node-sass</code>是<code>5.0.0</code>的，会出现版本不兼容问题。<br>如果在这时候卸载<code>sass-loadeer</code>，然后安装高版本的<code>sass-loader</code>，又会出现其它模块的不兼容问题。<br>如果你选择安装<code>node-sass@4.14.1</code>，这时候还会出现<code>python</code>报错的问题，于是<code>npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass</code>设置为淘宝源，再下载就好了。</p><h3 id="安装react-router"><a href="#安装react-router" class="headerlink" title="安装react-router"></a>安装react-router</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install react-router --save</span><br><span class="line">npm install react-router-dom --save</span><br><span class="line">npm install @types&#x2F;react-router-dom</span><br></pre></td></tr></table></figure><h3 id="安装react-redux"><a href="#安装react-redux" class="headerlink" title="安装react-redux"></a>安装react-redux</h3><p><code>npm install react-redux redux @types/react-redux @types/redux</code></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Typescript </tag>
            
            <tag> AntDesign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router学习记录</title>
      <link href="2021/01/07/vue-router%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/01/07/vue-router%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.push(location, onComplete?, onAbort?)</span><br></pre></td></tr></table></figure><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&#39;...&#39;&gt;</code></td><td><code>router.push(...)</code></td></tr></tbody></table><p>注意：如果目的路由与当前路由相同，只是参数发生变化，需要使用<code>beforeRouteUpdate</code>来响应这个变化。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.replace(location, onComplete?, onAbort?)</span><br></pre></td></tr></table></figure><table><thead><tr><th>声明式</th><th>编程式</th></tr></thead><tbody><tr><td><code>&lt;router-link :to=&#39;...&#39; replace&gt;</code></td><td><code>router.replace()</code></td></tr></tbody></table><p><code>router.replace</code>与<code>router.push</code>很像，但是<code>router.replace</code>不会向<code>history</code>添加新纪录，而是替换掉当前<code>history</code>的记录。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.go(n)</span><br></pre></td></tr></table></figure><p>类似于<code>window.history.go(n)</code></p><h4 id="路由组件传参"><a href="#路由组件传参" class="headerlink" title="路由组件传参"></a>路由组件传参</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//pass</span></span><br><span class="line"><span class="comment">//后续补充，还没理解耦合问题</span></span><br></pre></td></tr></table></figure><h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><h5 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h5><p><code>router.beforeEach</code>注册全局前置守卫，当一个导航触发时，全局前置守卫是按照创建顺序调用。守卫是异步解析执行的，此时导航所在守卫的<code>resolve</code>都在等待中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;...&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>to: router</code>：即将要进入的目标</li><li><code>from: route</code>：当前导航正要离开的路由</li><li><code>next: function</code>：resolve钩子  </li><li><code>next()</code>：进入管道中的下一个钩子，如果管道中钩子都执行完，导航的状态变为<code>confirmed</code>。</li><li><code>next(false)</code>：中断当前导航。如果浏览器URL变化了，那么URL地址会重置到<code>from</code>路由对应的地址。</li><li><code>next(error)(2.4.0+)</code>：导航会被终止且错误会被传递给<code>router.onError</code>的回调  </li></ul><p>任何给定的导航守卫中，<code>next</code>函数都需要被严格调用一次。他可以出现多于一次，但是只能在所有逻辑路径都不重叠的情况下，否则钩子永远都不解析或报错。</p><h5 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h5><blockquote><p>2.5.0+  </p></blockquote><p><code>router.beforeResolve</code>与<code>router.beforeEach</code>类似，在导航确认之前，所有组件内守卫和异步路由被解析后调用。</p><h5 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;to&#x27;</span>,</span><br><span class="line">      beforeEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//pass</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h5><blockquote><p>beforRouteEnter<br>beforRouteUpdate (2.2+)<br>beforRouteLeave  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在渲染该组件的路由没有被确认前调用</span></span><br><span class="line">  <span class="comment">// 不能获取组件实例this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在当前路由改变，但是当前路由被复用时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">  <span class="comment">// 可以访问组件实例this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h3><p>1、触发导航<br>2、在失活的组件中调用<code>beforeRouteLeave</code><br>3、调用全局的<code>beforeEach</code><br>4、在重用的组件中调用<code>beforeRouteUpdate</code><br>5、在路由配置中调用<code>beforeEnter</code><br>6、解析异步路由<br>7、在被激活的组件中调用<code>beforeRouteEnter</code><br>8、调用全局的<code>beforeRouteResolve</code><br>9、导航被确认<br>10、调用全局<code>afterEach</code><br>11、触发DOM更新<br>12、调用<code>beforeRouteEnter</code>中传入<code>next</code>的回调函数，创建好的组件会作为回调函数的参数传入</p><h3 id="过渡动效"><a href="#过渡动效" class="headerlink" title="过渡动效"></a>过渡动效</h3><h4 id="单个路由的过渡"><a href="#单个路由的过渡" class="headerlink" title="单个路由的过渡"></a>单个路由的过渡</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cosnt Foo = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition name=&quot;slide&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Bar = &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition name=&quot;fade&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于路由的过渡"><a href="#基于路由的过渡" class="headerlink" title="基于路由的过渡"></a>基于路由的过渡</h4><p>基于当前路由和目标路由，动态设置效果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;transition :name=<span class="string">&quot;transitionName&quot;</span>&gt;</span><br><span class="line">  &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">&#x27;$route&#x27;</span>(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> toDepth = to.path.split(<span class="string">&#x27;/&#x27;</span>).length;</span><br><span class="line">    <span class="keyword">const</span> fromDpth = <span class="keyword">from</span>.path.split(<span class="string">&#x27;/&#x27;</span>).length;</span><br><span class="line">    <span class="built_in">this</span>.transitionName = toDepth &lt; fromDepth ? <span class="string">&#x27;slide-right&#x27;</span> : <span class="string">&#x27;slide-left&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [...],</span><br><span class="line">  <span class="function"><span class="title">scrollBehavior</span>(<span class="params">ro, <span class="keyword">from</span>, savedPosition</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">savedPosition</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> savedPosition</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="异步滚动"><a href="#异步滚动" class="headerlink" title="异步滚动"></a>异步滚动</h4><blockquote><p>2.8.0+  </p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">scrollBehavior</span>(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve (&#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="2021/01/05/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>2021/01/05/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h4 id="长列表性能优化"><a href="#长列表性能优化" class="headerlink" title="长列表性能优化"></a>长列表性能优化</h4><p>当只是想纯粹的展示数据时，这时候可以通过禁止<code>Vue</code>劫持数据来减少组件初始化的时间。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        users: &#123;&#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">&#x27;/api/user&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.users = <span class="built_in">Object</span>.freeze(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="销毁事件"><a href="#销毁事件" class="headerlink" title="销毁事件"></a>销毁事件</h4><p><code>Vue</code>组件销毁时，会自动清理它与其它实例的关联，解绑它的全部指令及事件监听器，但是仅限于组件本身的事件。如果使用了<code>addEventListener</code>等方式是不会自动销毁的，需要手动清理。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.click, <span class="literal">false</span>)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">beforeDestroy</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    removeEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="built_in">this</span>.click, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h4><p>进入首页时，如果加载的资源过多，会导致白屏，使用路由懒加载，只有路由被访问的时候才加载，能大大提升首页显示的速度。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">            component: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./Foo.vue&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> performance-optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟DOM和增量DOM</title>
      <link href="2021/01/05/%E8%99%9A%E6%8B%9FDOM%E5%92%8C%E5%A2%9E%E9%87%8FDOM/"/>
      <url>2021/01/05/%E8%99%9A%E6%8B%9FDOM%E5%92%8C%E5%A2%9E%E9%87%8FDOM/</url>
      
        <content type="html"><![CDATA[<h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><h4 id="虚拟DOM的工作流程"><a href="#虚拟DOM的工作流程" class="headerlink" title="虚拟DOM的工作流程"></a>虚拟DOM的工作流程</h4><ul><li>当用户UI发生变化时，将整个用户UI渲染到虚拟DOM中</li><li>将当前虚拟DOM与之前的虚拟DOM进行比较，计算表现形式间的差异</li><li>根据变化差异更新真实DOM<h4 id="虚拟DOM的优缺点"><a href="#虚拟DOM的优缺点" class="headerlink" title="虚拟DOM的优缺点"></a>虚拟DOM的优缺点</h4>优点</li><li>高效的diff算法</li><li>简单且有助于提升性能</li><li>轻量</li><li>允许构建应用程序不需要考虑状态转换<br>缺点</li><li>哪怕只是微小变化，也会检查所有步骤来识别变化  </li></ul><h3 id="增量DOM"><a href="#增量DOM" class="headerlink" title="增量DOM"></a>增量DOM</h3><h4 id="增量DOM的工作方式"><a href="#增量DOM的工作方式" class="headerlink" title="增量DOM的工作方式"></a>增量DOM的工作方式</h4><p>增量DOM通过使用真实DOM来定位代码更新，这种方法比虚拟DOM简单，内存中不会存任何真实DOM的虚拟表示来计算差异，真实DOM仅用于与新的DOM进行差异比较。  </p><h4 id="增量DOM的优缺点"><a href="#增量DOM的优缺点" class="headerlink" title="增量DOM的优缺点"></a>增量DOM的优缺点</h4><p>优点</p><ul><li>易于与其他框架结合使用</li><li>简单的API使其成为强大的目标模板引擎</li><li>适合基于移动设备的应用程序<br>缺点</li><li>耗时  </li></ul><h3 id="虚拟DOM和增量DOM的区别"><a href="#虚拟DOM和增量DOM的区别" class="headerlink" title="虚拟DOM和增量DOM的区别"></a>虚拟DOM和增量DOM的区别</h3><ul><li>虚拟DOM不直接操作真实DOM而是计算差异再更新，增量DOM直接操作真实DOM</li><li>虚拟DOM用的是解释器，无法使用tree shaking，而增量DOM可以</li><li>虚拟DOM在内存中存放真实DOM的虚拟表示，占用大量内存，增量DOM不会</li></ul>]]></content>
      
      
      <categories>
          
          <category> front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现瀑布流</title>
      <link href="2021/01/01/CSS%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81/"/>
      <url>2021/01/01/CSS%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<p>之前没有写过瀑布流，最近需要改一个东西，学习一下。<br>瀑布流的实现主要通过几个关键属性来实现。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;item&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>columns</code>代表瀑布流中流的数量，<code>column-gap</code>代表流之间的间距，<code>break-inside</code>用来避免流内的内容被隔开。</p></blockquote><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">columns</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020-2021的总结</title>
      <link href="2020/12/31/2020-2021/"/>
      <url>2020/12/31/2020-2021/</url>
      
        <content type="html"><![CDATA[<p>在2020年12月31日的22：05分，看着B站跨年晚会的时候，写下这篇关于2020的回顾。<br>2020年是一个比较特殊的年度，对我来说，从开始到结尾都和往年不一样。<br>去年过年的时候因为抢不到票，太麻烦了就想着一个人体验下安静的生活。在我妈劝我回家的过程中，疫情就爆发了，我突然就变成了大人，日常让家人少出门，注意安全，变成了自己讨厌的唠叨模样。<br>年初的时候制定了关于2020的规划，于是一边摸鱼划水，一边学习。<br>坚持了一阵，又放弃了一阵，又捡起来一阵。<br>一直到了九月份才真正的开始认真的准备换工作的事情，于是先打了一个月的游戏，打到自己心态崩了。<br>然后裸辞开始啃知识，每天刷着leetcode，虽然痛苦，但是也很快乐。<br>找工作的时候其实挺挫败的，因为毕业两年都没有认真学习，自己的过去要自己承担。<br>最后机缘巧合的又回到了南京，在南京，幸福感有些提升。也许是熟悉，也许是终于有了目标。虽然不是每一天都在往制定的目标上冲，但是离目标越来越近。<br>因为觉得自己菜，所以现在被工作PUA也还能接受，大概一年左右又要换工作了。<br>现在更多是对家庭的考虑，之前和爷爷打电话，爷爷说想我了，还说到不知道自己还能活多少年，突然就觉得时间匆匆。<br>工作的事情安定了就立刻回家了，陪爷爷奶奶聊聊天挺好的。<br>今年也和朋友们见了见聊了聊，才发现认识的朋友也都好多年了，确实开始变老了。<br>每一年都要有一个规划，好让自己离人生目标越来越近。<br>五月的最后有五月天，2020的最后一天依然是五月天。<br>2020最爱的还是五月天，每次听着五月天的歌，都会有勇气继续努力下去。<br>2020看过了16本书，大部分是小说，但是看的最久的是《你不知道的JavaScript》。<br>2020也是经历过996的人了，即将进入本命年的年纪，要继续努力。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些杂念</title>
      <link href="2020/11/27/%E4%B8%80%E4%BA%9B%E6%9D%82%E5%BF%B5/"/>
      <url>2020/11/27/%E4%B8%80%E4%BA%9B%E6%9D%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>最近宿舍四人聚了一下，老二工资已经涨到30k了，然后想到自己进入了另一个坑，有点裂开，还好一开始就做好了进坑的准备。<br>学习一阵继续蹦跶吧，单身的人只想赚钱，感觉现在好缺钱，尤其是想买自己不需要的东西或者看房子没钱的时候，感觉极为强烈。<br>之前欢大佬毕业两年一直15级很惨，实际上发现人家收入不靠工资，人家是15-20薪，加几天班都能赚10k，哭了。<br>以后还是要进互联网大厂，年轻的时候多赚钱，程序员我觉得40岁差不多了，除非真正的大佬，否则应该退隐江湖了。<br>回到家，爷爷一大早就过来看我。<br>老人家确实是老了，不知不觉已经78了。<br>也只有休息的时候去跟老人家聊聊天，这次回家就是因为之前跟爷爷奶奶打电话，爷爷说想我了，于是就回家了。<br>回家第二天就下雪了，被封印在床上。<br>回到家才有所谓的安全感，每天睡得醒不过来。<br>生活是什么样子的，至少不是我喜欢的样子。<br>但我希望我能改变我现在的生活，过上我想要的生活。<br>快24了，加油吧，不大不小的年纪。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="2020/11/24/Vue/"/>
      <url>2020/11/24/Vue/</url>
      
        <content type="html"><![CDATA[<h3 id="v-if-和v-show的区别"><a href="#v-if-和v-show的区别" class="headerlink" title="v-if 和v-show的区别"></a>v-if 和v-show的区别</h3><p><code>v-if</code>控制节点的存在，<code>v-show</code>控制节点的<code>display</code>属性。因此<code>v-if</code>的切换成本高，<code>v-show</code>的初始渲染成本高。所以<code>v-if</code>适用于条件几乎不变的情况，而切换比较频繁的时候适合使用<code>v-show</code>。<br><code>v-show</code>不支持<code>&lt;template&gt;</code>元素。</p><h3 id="template-functional"><a href="#template-functional" class="headerlink" title="template functional"></a>template functional</h3><p><code>functional</code>是函数式组件的一个标记，如果一个组件没有管理任何状态，也没有监听任何传给它的状态，没有声明周期方法。只是接收一些<code>props</code>的函数，在这种情况下可以将组件标记为<code>functional</code>，这表示它是无状态的(没有响应数据)，也没有实例(this上下文)。函数式组件本质上是函数，渲染开销小。</p><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性是基于响应式依赖进行缓存的，只在相关依赖发生变化时进行重新计算，也就是说相关依赖没有发生变化的话会立即返回值。<br>计算属性默认只有<code>getter</code>，可以在需要时添加<code>setter</code>。  </p><h3 id="Class绑定"><a href="#Class绑定" class="headerlink" title="Class绑定"></a>Class绑定</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;static&quot; :class&#x3D;&quot;&#123;active: isActive, &#39;text-danger&#39;: hasError&#125;&quot;&gt;</span><br></pre></td></tr></table></figure><h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h3><p>Vue将被侦听的数组变更方法进行了包裹，这些方法会触发视图变化。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push()</span><br><span class="line">pop()</span><br><span class="line">shift()</span><br><span class="line">unshift()</span><br><span class="line">splice()</span><br><span class="line">sort()</span><br><span class="line">reverse()</span><br></pre></td></tr></table></figure><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.stop</span><br><span class="line">.prevent</span><br><span class="line">.capture</span><br><span class="line">.self</span><br><span class="line">.once</span><br><span class="line">.passive</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止单击事件继续传播 --&gt;</span><br><span class="line">&lt;a v-on:click.stop&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 修饰符可以串联 --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 添加事件监听器时使用使用事件捕捉模式 --&gt;</span><br><span class="line">&lt;!-- 即内部事件在在这处理，然后才交给内部处理 --&gt;</span><br><span class="line">&lt;div v-on:click.capture&#x3D;&quot;doThis&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有event.target是当前元素自身时触发处理函数 --&gt;</span><br><span class="line">&lt;a v-on:click.self&#x3D;&quot;doThis&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="表单修饰符"><a href="#表单修饰符" class="headerlink" title="表单修饰符"></a>表单修饰符</h3><h4 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h4><p>默认情况下，<code>v-model</code>在每次<code>input</code>事件触发后将输入框的值与数据进行同步，添加<code>lazy</code>修饰符后，只会在触发<code>change</code>事件时会同步。  </p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind.lazy</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h4><p>自动将输入内容转换成数值类型。</p><h4 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h4><p>自动过滤首尾空白字符。</p><h3 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h3><h4 id="传入一个对象的所有property"><a href="#传入一个对象的所有property" class="headerlink" title="传入一个对象的所有property"></a>传入一个对象的所有<code>property</code></h4><p>如果想要将一个对象的所有<code>property</code>都作为<code>prop</code>传入，可以使用不带参数的<code>v-bind</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;blog-post v-bind=<span class="string">&quot;obj&quot;</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h4 id="禁用Attribute继承"><a href="#禁用Attribute继承" class="headerlink" title="禁用Attribute继承"></a>禁用Attribute继承</h4><p>如果你不希望组件的根组件继承<code>attribute</code>，你可以在组件的选项中设置<code>inheritAttrs: false</code>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">    inheritAttrs: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><h4 id="将原生事件绑定到组件"><a href="#将原生事件绑定到组件" class="headerlink" title="将原生事件绑定到组件"></a>将原生事件绑定到组件</h4><h4 id="sync修饰符"><a href="#sync修饰符" class="headerlink" title=".sync修饰符"></a>.sync修饰符</h4><p><code>prop</code>的双向绑定，可以使用<code>.sync</code>修饰符来使双向绑定更加简洁，但是不能搭配表达式使用。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;text-document </span><br><span class="line">    v-bind:title&#x3D;&quot;doc.title&quot; </span><br><span class="line">    v-on:update:title&#x3D;&quot;doc.title&#x3D;$event&quot;&gt;</span><br><span class="line">&lt;&#x2F;text-document&gt;</span><br><span class="line"></span><br><span class="line">&lt;text-document v-bind:title.sync&#x3D;&quot;doc.title&quot;&gt;</span><br><span class="line">&lt;&#x2F;text-document&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>vue 2.6 v-slot</p><h4 id="后备内容"><a href="#后备内容" class="headerlink" title="后备内容"></a>后备内容</h4><p>有时为一个插槽设置默认的内容很有必要，它只会在没有提供的时候被渲染。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button&gt;</span><br><span class="line">    &lt;slot&gt;submit&lt;/slot&gt;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;submit-button&gt;&lt;<span class="regexp">/submit-button&gt; /</span><span class="regexp">/渲染submit</span></span><br><span class="line"><span class="regexp">&lt;submit-button&gt;save&lt;/</span>submit-button&gt;  <span class="comment">//渲染save</span></span><br></pre></td></tr></table></figure><h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h4><p><code>$refs</code>只会在组件渲染完时生效，并且他们不是响应式的。</p><h4 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h4><p><code>provide</code>选项允许执行想要提供给后代组件的数据/方法。<br>负面效果就是造成了强耦合。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">provide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getMap: <span class="built_in">this</span>.getMap</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在后代中都可以通过inject获取</span></span><br><span class="line">inject: [<span class="string">&#x27;getMap&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="程序化的事件侦听器"><a href="#程序化的事件侦听器" class="headerlink" title="程序化的事件侦听器"></a>程序化的事件侦听器</h3><p>挂载第三方库的时候，需要</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.picker = <span class="keyword">new</span> Pickaday(&#123;</span><br><span class="line">        field: <span class="built_in">this</span>.$refs.input,</span><br><span class="line">        format: <span class="string">&#x27;YYYY-DD-MM&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroyed&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        picker.destroy()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><h3 id="强制更新"><a href="#强制更新" class="headerlink" title="强制更新"></a>强制更新</h3><p><code>$forceUpdate</code>可以用来强制更新，但是<code>Vue</code>本身就是响应式，应该避免这些用法，多考虑是不是自己用错了。 </p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="2020/11/19/Vuex/"/>
      <url>2020/11/19/Vuex/</url>
      
        <content type="html"><![CDATA[<p>vuex的核心就是仓库（store），包含着应用中大部分的状态(state)。<br>但是vuex和全局对象不同的是：<br>1、<code>vuex</code>的状态存储是响应式的。当<code>Vue</code>组件从<code>store</code>中读取状态时，如果发生变化，那么相应的组件也会得到高效的更新。<br>2、不能直接修改<code>store</code>中的状态。<code>vuex</code>的状态修改只能通过显示提交(commit)<code>mutation</code>修改。  </p><h4 id="State"><a href="#State" class="headerlink" title="State"></a>State</h4><p>由于<code>vuex</code>中状态是响应式存储的，所以获取状态的简单方法是在计算属性中返回状态。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">count</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> store.state.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了避免取多个状态时的重复写法，可以使用mapState进行辅助</span></span><br><span class="line">computed: &#123;</span><br><span class="line">    ...mapState(&#123;</span><br><span class="line">        <span class="comment">//箭头函数简练</span></span><br><span class="line">        count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传字符参数等同上箭头函数</span></span><br><span class="line">        countAlias： <span class="string">&quot;count&quot;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了能使用this获取局部状态，必须使用常规函数</span></span><br><span class="line">        <span class="function"><span class="title">countPlusLocalState</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> state.count + <span class="built_in">this</span>.localCount</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h4><p><code>vuex</code>允许在store中定义<code>getters</code>，就像计算属性一样，<code>getters</code>的返回值会根据它的依赖被缓存起来，且只有它的依赖值发生改变才会被重新计算。<br><code>getter</code>接受<code>state</code>作为第一个参数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    doneTodos: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.done)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getter</code>接受<code>getter</code>作为第二个参数<br><code>getter</code>可以通过属性访问，这时候getter是作为Vue响应式系统的一部分缓存其中的。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    doneTodos: <span class="function">(<span class="params">state, getter</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getters.doneTodos.length</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">store.getters.doneTodos</span><br></pre></td></tr></table></figure><p>也可以通过方法访问，每次都会去调用，不会进行缓存。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">    getTodoById: <span class="function">(<span class="params">state</span>) =&gt;</span> <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.todos.find(<span class="function"><span class="params">todo</span> =&gt;</span> todo.id == id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">store.getters.getTodoById(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>mapGetters辅助函数仅仅是将getters映射到部分计算属性  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapGetters([</span><br><span class="line">            <span class="string">&#x27;doneTodosCount&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;anotherGetter&#x27;</span></span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h4><p>异步改变状态需要使用<code>action</code>，<code>action</code>不直接更改状态，而是发起<code>mutation</code></p><h4 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h4><p>是改变<code>store</code>中状态的执行者，只能是同步操作。</p><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>对于大型应用，可以将仓库分割成子模块。</p><h3 id="通过几个问题理解vuex的原理"><a href="#通过几个问题理解vuex的原理" class="headerlink" title="通过几个问题理解vuex的原理"></a>通过几个问题理解vuex的原理</h3><h4 id="vuex的store是如何注入到组件中的？"><a href="#vuex的store是如何注入到组件中的？" class="headerlink" title="vuex的store是如何注入到组件中的？"></a>vuex的store是如何注入到组件中的？</h4><p><code>Vue.use(Vuex)</code>会调用<code>install</code>方法，装载<code>vuex</code>。<br>然后看看<code>install</code>的执行逻辑。  </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">    beforeCreate(): &#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">this</span>.$options &amp;&amp; <span class="built_in">this</span>.$options.store</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$store = <span class="built_in">this</span>.$options.store</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.$store = <span class="built_in">this</span>.$parent &amp;&amp; <span class="built_in">this</span>.$parent.$store</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>综上可知，vuex的注入是通过minxin的方法，在vue构建实例时通过钩子函数<code>beforeCreate</code>注入的。</p><h4 id="Getters的实现"><a href="#Getters的实现" class="headerlink" title="Getters的实现"></a>Getters的实现</h4><p><code>vuex</code>和<code>vue</code>一样是响应式的，<code>state</code>是通过放入<code>data</code>中实现，而<code>getters</code>是通过放入<code>computed</code>中做到响应式的。  </p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scss</title>
      <link href="2020/11/15/scss/"/>
      <url>2020/11/15/scss/</url>
      
        <content type="html"><![CDATA[<h4 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h4><p>sass根据语法分为两种格式Sass和Scss。<br>scss与css更类似，有大括号，文件后缀是.scss。<br>sass使用缩进来表示关系，文件后缀是.sass。  </p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>变量以$开头，用来存储重复使用的数据，包括宽度、高度和颜色等等。<br>如果变量需要嵌在字符串中，则需要写在<code>#&#123;&#125;</code>中。<br>但是如果变量是数字要避免<code>#&#123;$value&#125;px</code>这种写法，尽量使用<code>$value * 1px</code>。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$side</span>: left;</span><br><span class="line"><span class="selector-class">.rounded</span> &#123;</span><br><span class="line"><span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">###### 全局变量与局部变量</span><br><span class="line">定义在顶层的是全局变量，定义在块中的是局部变量，局部变量可以跟全局变量重名。  </span><br><span class="line">```SCSS</span><br><span class="line"><span class="variable">$global-variable</span>: global value;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="variable">$local-variable</span>: local value;</span><br><span class="line">global: <span class="variable">$global-variable</span>;</span><br><span class="line">local: <span class="variable">$local-variable</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">如果需要在局部环境声明一个全局变量，使用!global标志。</span><br><span class="line">```SCSS</span><br><span class="line"><span class="variable">$variable</span>: first global value;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="variable">$variable</span>: second global value !global;</span><br><span class="line">value: <span class="variable">$variable</span>;  <span class="comment">//second global value;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">value: <span class="variable">$variable</span>;  <span class="comment">// second global value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">nav</span>&#123;</span><br><span class="line"><span class="selector-class">.ul</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css</span><br><span class="line">nav ul&#123;</span><br><span class="line">margin: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在嵌套的代码块中，可以引用父级元素。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#ffb3ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h5><p>不需要将所有sass写在同一个文件中，可以根据功能或者意义分割成模块。<br>然后使用<code>@use</code>引入模块。当前只有Dart Sass支持<code>@use</code>，其他使用<code>@import</code>。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//_base.scss</span></span><br><span class="line"><span class="variable">$font-stack</span>: Helvetica, sans-serif;</span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#333</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">100%</span> <span class="variable">$font-stack</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//style.scss</span></span><br><span class="line"><span class="keyword">@use</span> <span class="string">&#x27;base&#x27;</span>;</span><br><span class="line"><span class="selector-class">.inverse</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: base.<span class="variable">$primary-color</span>;</span><br><span class="line"><span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h5><p>在考虑浏览器兼容性的时候，有很多属性需要重复写，这时候使用混入，用混入<br>的方式写兼容性语句，只需要考虑样式的值，不需要重复的书写。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> transfrom(<span class="variable">$property</span>) &#123;</span><br><span class="line">-webkit-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">-moz-<span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line"><span class="attribute">transform</span>: <span class="variable">$property</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123; <span class="keyword">@include</span> tansform(rorate(<span class="number">30deg</span>)); &#125;</span><br></pre></td></tr></table></figure><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><p>当一个基本样式不变的组件有多种样式，使用继承的方式可以减少重复代码。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">%message-shared &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%message-heights &#123;</span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.message</span>&#123;</span><br><span class="line"><span class="keyword">@extend</span> %message-shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sucess</span> &#123;</span><br><span class="line"><span class="keyword">@extend</span> %message-shared;</span><br><span class="line"><span class="attribute">border</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line"><span class="keyword">@extend</span> %message-shared;</span><br><span class="line"><span class="attribute">border</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><p>sass支持一些标准的数学运算符，比如+、-、*、/和%。  </p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role=&#x27;main&#x27;]</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role=&#x27;complementary&#x27;]</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line">##### 注释</span><br><span class="line">标准的注释<span class="comment">/* comment */</span>，会保留到编译后的文件。  </span><br><span class="line">单行注释<span class="comment">// comment，只保留在源文件中，编译后被省略。  </span></span><br><span class="line">在<span class="comment">/*后加上!，表示这是重要注释。即使是压缩模式编译，也会保留这行注释，通常  </span></span><br><span class="line"><span class="comment">可以用于声明版权信息。  </span></span><br><span class="line"><span class="comment">```SCSS</span></span><br><span class="line"><span class="comment">/*!</span></span><br><span class="line"><span class="comment">    important comment</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h5><h6 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h6><p><code>@if</code>和<code>@else</code></p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="keyword">@if</span> <span class="number">1</span> + <span class="number">1</span> === <span class="number">2</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid; &#125;</span><br><span class="line"><span class="keyword">@else</span> &#123; <span class="attribute">border</span>: <span class="number">2px</span> dotted; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h6><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for循环</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">1</span> to <span class="number">10</span> &#123;</span><br><span class="line"><span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line"><span class="attribute">border</span>: <span class="variable">$i</span> * <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//while循环</span></span><br><span class="line"><span class="variable">$i</span>: <span class="number">6</span>;</span><br><span class="line"><span class="keyword">@while</span> <span class="variable">$i</span> &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line"><span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//each</span></span><br><span class="line"><span class="keyword">@each</span> <span class="variable">$member</span> in a, b, c, d &#123;</span><br><span class="line">.#&#123;member&#125; &#123;</span><br><span class="line"><span class="attribute">background-image</span>: url(<span class="string">&#x27;/image/#&#123;member&#125;.jpg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h6><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@function</span> double(<span class="variable">$n</span>) &#123;</span><br><span class="line"><span class="keyword">@return</span> <span class="variable">$n</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sider</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: double(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h5><h6 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h6><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">lighten(<span class="selector-id">#cc3</span>, 10%)  <span class="comment">//#d6d65c</span></span><br><span class="line">darken(<span class="selector-id">#cc3</span>, 10%)  <span class="comment">//#a3a329</span></span><br><span class="line">grayscale(<span class="selector-id">#cc3</span>)  <span class="comment">//#808080</span></span><br><span class="line">complement(<span class="selector-id">#cc3</span>) <span class="comment">//#33c</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SCSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="2020/11/14/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2020/11/14/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h4><p>最近因为碰到取值问题打算好好看下Vue的生命周期，之前只是简单的了解了下Vue的生命周期。浅略的知道分为<code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>beforeUpdate</code>、<code>updated</code>、<code>beforeDestroy</code>、<code>destroyed</code>，但是对于在这之间Vue的不同阶段到底做了什么不甚了解。</p><h5 id="vue的源码"><a href="#vue的源码" class="headerlink" title="vue的源码"></a>vue的源码</h5><p>分析生命周期，我们首先得从创建vue实例开始。<br>在<code>new Vue()</code>的时候，<code>vue/src/core/instance/index.js</code>中的<code>_init()</code>负责初始化各个功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !(<span class="built_in">this</span> instance Vue)</span>)</span>&#123;</span><br><span class="line">        warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_init</code>中的执行顺序为下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">initLifeClircle(vm)</span><br><span class="line">initEvents(vm)</span><br><span class="line">initRender(vm)</span><br><span class="line">callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">initInjections(vm)  <span class="comment">//resolve injections before data/props</span></span><br><span class="line">initState(vm)</span><br><span class="line">initProvide(vm)  <span class="comment">//resolve provide after data/props</span></span><br><span class="line">callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br></pre></td></tr></table></figure><p>而在<code>initState()</code>中执行顺序如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(opts.props) initProps(vm, opts.props)  <span class="comment">//初始化props</span></span><br><span class="line"><span class="keyword">if</span>(opts.methods) initMethods(vm, opts.methods)  <span class="comment">//初始化methods</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">opts.data</span>)</span> &#123;</span><br><span class="line">    initData(vm, opts.data);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* as root data*/</span>);  <span class="comment">//初始化data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opts.computed) initComputed(vm, opts.computed);  <span class="comment">//初始化computed</span></span><br></pre></td></tr></table></figure><p>可以看出先执行<code>props</code>，然后是<code>methods</code>，紧接着是<code>data</code>最后是<code>computed</code>。并且这个阶段是在<code>beforeCreated</code>和<code>created</code>之间，<br>所以使用computed中的数据时需要慎重。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> lifeCircle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="2020/11/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>2020/11/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="重新搭建的原因"><a href="#重新搭建的原因" class="headerlink" title="重新搭建的原因"></a>重新搭建的原因</h4><p>因为以前的博客由于种种事由断更了很久，电脑也换了一个又一个。<br>原来的项目源文件已经丢失了，只剩下现在的编译之后的静态页面，<br>虽然是打算自己搭网站的，但是最近一直没空，先维护一下静态博客。</p><h4 id="使用的脚手架"><a href="#使用的脚手架" class="headerlink" title="使用的脚手架"></a>使用的脚手架</h4><p>依然是<a href="https://hexo.io/">hexo</a>，不过主题这次选择melody，<a href="https://molunerfinn.com/hexo-theme-melody-doc/">melody相关配置</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> melody </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/14/hello-world/"/>
      <url>2020/11/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
